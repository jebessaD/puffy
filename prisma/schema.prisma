datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id               Int       @id @default(autoincrement())
  name             String
  description      String
  price            Float
  discount         Float?    // Optional discount
  stockQuantity    Int
  category         String
  color            String?  // Optional
  size             String?  // Optional
  mainImage        String   // Required
  additionalImages String[] // Optional, list of URLs
  averageRating    Float    @default(0)
  numReviews       Int      @default(0)
  reviews          Review[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  orderItems       OrderItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // Rating from 1 to 5
  comment   String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model ShippingAddress {
  id         String  @id @default(cuid())
  fullName   String
  email      String
  phone      String?
  address    String
  city       String
  state      String?
  country    String
  postalCode String

  orders     Order[]
}

model Order {
  id              Int       @id @default(autoincrement())
  shippingAddressId String
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  totalAmount      Float
  paymentStatus    PaymentStatus @default(PENDING) // "PENDING", "PAID", etc.
  orderStatus      OrderStatus   @default(PENDING) // "PENDING", "SHIPPED", etc.
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  orderItems       OrderItem[]
  payment          Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Discount {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  percentage Float
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique
  status     PaymentStatus
  paymentDate DateTime @default(now())
  amount     Float
  order      Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
